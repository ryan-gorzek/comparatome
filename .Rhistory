library(Seurat)
library(SeuratDisk)
library(reticulate)
library(scrubletR)
library(ggplot2)
library(dplyr)
library(data.table)
library(tidyverse)
library(comparatome)
library(here)
source(here("config.R"))
data_path <- paste0(dir.list$central, "samples/")
sample_IDs <- c('OpossumV1-3A', 'OpossumV1-3B', 'OpossumV1-4A', 'OpossumV1-4B')
mapping_path <- paste0(dir.list$central, "Opossum_Mouse_GeneMapping_EnsemblBioMart.txt")
data <- PreprocessData(sample_IDs, data_path, "Opossum_V1", mapping_path)
library(Seurat)
library(SeuratDisk)
library(reticulate)
library(scrubletR)
library(ggplot2)
library(dplyr)
library(data.table)
library(tidyverse)
library(comparatome)
library(here)
source(here("config.R"))
data_path <- paste0(dir.list$central, "samples/")
sample_IDs <- c('OpossumV1-3A', 'OpossumV1-3B', 'OpossumV1-4A', 'OpossumV1-4B')
mapping_path <- paste0(dir.list$central, "Opossum_Mouse_GeneMapping_EnsemblBioMart.txt")
data <- PreprocessData(sample_IDs, data_path, "Opossum_V1", mapping_path)
remove.packages("comparatome")
source(here("config.R"))
library(comparatome)
data_path <- paste0(dir.list$central, "samples/")
sample_IDs <- c('OpossumV1-3A', 'OpossumV1-3B', 'OpossumV1-4A', 'OpossumV1-4B')
mapping_path <- paste0(dir.list$central, "Opossum_Mouse_GeneMapping_EnsemblBioMart.txt")
data <- PreprocessData(sample_IDs, data_path, "Opossum_V1", mapping_path)
data_path
source(here("config.R"))
library(Seurat)
library(SeuratDisk)
library(reticulate)
library(scrubletR)
library(ggplot2)
library(dplyr)
library(data.table)
library(tidyverse)
library(comparatome)
library(here)
source(here("config.R"))
data_path <- paste0(dir.list$central, "samples/")
sample_IDs <- c('OpossumV1-3A', 'OpossumV1-3B', 'OpossumV1-4A', 'OpossumV1-4B')
mapping_path <- paste0(dir.list$central, "Opossum_Mouse_GeneMapping_EnsemblBioMart.txt")
data <- PreprocessData(sample_IDs, data_path, "Opossum_V1", mapping_path)
dir.list$central
sample <- "OpossumV1-3A"
temp.obj.path <- paste0(data_path, sample)
temp.obj.data <- Read10X(temp.obj.path, gene.column = gene.column)
library(Seurat)
library(SeuratDisk)
library(reticulate)
library(scrubletR)
library(ggplot2)
library(dplyr)
library(data.table)
library(tidyverse)
library(comparatome)
library(here)
source(here("config.R"))
data_path <- paste0(dir.list$central, "samples/")
sample_IDs <- c('OpossumV1-3A', 'OpossumV1-3B', 'OpossumV1-4A', 'OpossumV1-4B')
mapping_path <- paste0(dir.list$central, "Opossum_Mouse_GeneMapping_EnsemblBioMart.txt")
data <- PreprocessData(sample_IDs, data_path, "Opossum_V1", mapping_path)
remove.packages("comparatome")
tools.path <- "E:/Ryan/GitHub/"
# system("git clone https://github.com/ryan-gorzek/comparatome.git tools.path)
if (!requireNamespace("comparatome", quietly = TRUE)) {
install.packages("devtools")
devtools::install(paste0(tools.path, "comparatome"))
}
library(comparatome)
# Clone comparatome if needed
tools.path <- "E:/Ryan/GitHub/"
# system("git clone https://github.com/ryan-gorzek/comparatome.git tools.path)
if (!requireNamespace("comparatome", quietly = TRUE)) {
install.packages("devtools")
devtools::install(paste0(tools.path, "comparatome"))
}
library(comparatome)
library(Seurat)
library(SeuratDisk)
library(reticulate)
library(scrubletR)
library(ggplot2)
library(dplyr)
library(data.table)
library(tidyverse)
library(comparatome)
library(here)
source(here("config.R"))
data_path <- paste0(dir.list$central, "samples/")
sample_IDs <- c('OpossumV1-3A', 'OpossumV1-3B', 'OpossumV1-4A', 'OpossumV1-4B')
mapping_path <- paste0(dir.list$central, "Opossum_Mouse_GeneMapping_EnsemblBioMart.txt")
data <- PreprocessData(sample_IDs, data_path, "Opossum_V1", mapping_path)
obj.opossum <- data$obj
obj.opossum$species <- "Opossum"
# Plot nFeature and nCount
PlotQC(data)
# initial clustering
obj.opossum <- ClusterSCT(obj.opossum, c(1))
# Initial clustering
obj.opossum <- ClusterWithSCT(obj.opossum, c(1))
PlotClusters(obj.opossum, save.plots = TRUE)
canon.markers <- list(
class = c("Snap25", "Sv2b", "Gad1", "Gad2"),
L23 = c("Cux2", "Ccbe1", "Mdga1", "Stard8"),
L4 = c("Whrn", "Rorb"),
L5IT = c("Bcl11b"),
L5NP = c("Nxph1", "Tshz2", "Trhr", "Slc17a8"),
L5PT = c("Bcl6", "Erg", "Reln"),
L6CT = c("Foxp2", "Syt6"),
L6IT = c("Zfp804b", "Cdh9"),
L6b = c("Ctgf", "Inpp4b", "Svil"),
Pvalb = c("Pvalb", "Myo5b"),
Sst = c("Sst", "Chodl"),
Vip = c("Vip"),
Lamp5 = c("Lamp5", "Sv2c"),
Other = c("Frem1", "Stac", "Sncg", "Meis2"),
Astro = c("Aldh1l1", "Grin2c", "Phkg1"),
Endo = c("Pecam1", "Mecom", "Flt1"),
Micro = c("Cx3cr1", "Arhgap45", "Inpp5d"),
OD = c("Enpp6", "Mog", "St18"),
OPC = c("Pdgfra", "Cacng4"),
VLMC = c("Slc6a13", "Slc47a1", "Bnc2")
)
# look for canonical markers
DefaultAssay(obj.opossum) <- "RNA"
# PlotFeatures(obj.opossum, canon.markers)
DotPlot(obj.opossum, features = canon.markers, cols = c("lightgrey", "red"), scale = FALSE) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.25)) +
theme(panel.background = element_rect(fill = "white", color = NA), plot.background = element_rect(fill = "white", color = NA)) + NoLegend()
# look for canonical markers
DefaultAssay(obj.opossum) <- "RNA"
# PlotFeatures(obj.opossum, canon.markers)
p <- DotPlot(obj.opossum, features = c("Snap25", "Sv2b", "Gad1", "Gad2"), cols = c("lightgrey", "red"), scale = FALSE) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.25)) +
theme(panel.background = element_rect(fill = "white", color = NA), plot.background = element_rect(fill = "white", color = NA)) + NoLegend()
print(p)
SavePNGandSVG(p, dir.list$figS1$plots, "S1I_All-Class-DotPlot")
cells.glutamatergic <- WhichCells(obj.opossum, ident = c(1, 4, 5, 8, 9, 10, 11, 13, 14, 15, 17, 20, 24))
obj.opossum$class <- ifelse(colnames(obj.opossum) %in% cells.glutamatergic, "glutamatergic", "ambiguous")
cells.gabaergic <- WhichCells(obj.opossum, ident = c(6, 16, 18, 21, 22, 23, 25))
obj.opossum$class[cells.gabaergic] <- "gabaergic"
cells.nonneuronal <- WhichCells(obj.opossum, ident = c(2, 3, 7, 12, 19, 26, 27))
obj.opossum$class[cells.nonneuronal] <- "nonneuronal"
p <- DimPlot(obj.opossum, reduction = "umap", group.by = "class", label = FALSE, raster = FALSE, shuffle = TRUE) + xlim(-18, 18) + ylim(-18, 18) + coord_equal()
print(p)
SavePNGandSVG(p, dir.list$figS1$plots, "S1J_All-Class-DimPlot")
obj.opossum$all_SCT_snn_res.1 <- obj.opossum$SCT_snn_res.1 # Save the original clustering result for future reference
Idents(obj.opossum) <- "class"
obj.opossum.glutamatergic <- subset(obj.opossum, idents = "glutamatergic")
saveRDS(obj.opossum.glutamatergic, paste0(dir.list$central, "opossum_v1_glutamatergic.rds"))
obj.opossum.gabaergic <- subset(obj.opossum, idents = "gabaergic")
saveRDS(obj.opossum.gabaergic, paste0(dir.list$central, "opossum_v1_gabaergic.rds"))
obj.opossum.nonneuronal <- subset(obj.opossum, idents = "nonneuronal")
saveRDS(obj.opossum.nonneuronal, paste0(dir.list$central, "opossum_v1_nonneuronal.rds"))
PlotClusters <- function(obj, group.id) {
if (!missing(group.id)) {
Idents(obj) <- group.id
}
obj$active.ident <- obj@active.ident
dimplot_cluster <- DimPlot(obj, reduction = "umap", label = TRUE, raster = FALSE) + NoLegend() + xlim(-18, 18) + ylim(-18, 18) + coord_equal()
dimplot_sample <- DimPlot(obj, reduction = "umap", group.by = "sample", raster = FALSE, shuffle = TRUE) + xlim(-18, 18) + ylim(-18, 18) + coord_equal()
cluster.sample <- table(obj$sample, obj$active.ident) %>%
as.data.frame.matrix() %>%
rownames_to_column(var = "sample")
cluster.sample[-1] <- lapply(cluster.sample[-1], function(x) x/sum(x))
cluster.sample <- cluster.sample %>%
pivot_longer(
cols = -c("sample"),
names_to = "cluster",
values_to = "count"
)
cluster.sample$cluster <- factor(cluster.sample$cluster, levels = unique(cluster.sample$cluster))
barplot_sample <- ggplot(cluster.sample, aes(x=cluster, y=count, fill=sample)) +
geom_bar(stat="identity") +
theme_minimal()
dimplot_doublet <- DimPlot(obj, reduction = "umap", group.by = "predicted_doublets", raster = FALSE) + xlim(-18, 18) + ylim(-18, 18) + coord_equal()
# Summarize doublets by cluster
df <- obj[[]]
df$active.ident <- obj@active.ident
df_summary <- df %>%
dplyr::group_by(active.ident, predicted_doublets) %>%
dplyr::summarise(count = n()) %>%
dplyr::mutate(fraction = count / sum(count))
# Create the stacked bar plot
barplot_doublet <- ggplot(df_summary, aes(x = active.ident, y = fraction, fill = predicted_doublets)) +
geom_bar(stat = "identity") +
labs(x = "Clusters", y = "Doublet Fraction", fill = "Value") +
theme_minimal()
featplot_nfeature <- FeaturePlot(obj, "nFeature_RNA", raster = FALSE) + xlim(-18, 18) + ylim(-18, 18) + coord_equal()
vlnplot_nfeature <- VlnPlot(obj, "nFeature_RNA")
featplot_ncount <- FeaturePlot(obj, "nCount_RNA", raster = FALSE) + xlim(-18, 18) + ylim(-18, 18) + coord_equal()
vlnplot_ncount <- VlnPlot(obj, "nCount_RNA")
print(dimplot_cluster)
print(dimplot_sample)
print(barplot_sample)
print(dimplot_doublet)
print(barplot_doublet)
print(featplot_nfeature)
print(vlnplot_nfeature)
print(featplot_ncount)
print(vlnplot_ncount)
return(list(dimplot_cluster = dimplot_cluster,
dimplot_sample = dimplot_sample,
barplot_sample = barplot_sample,
dimplot_doublet = dimplot_doublet,
barplot_doublet = barplot_doublet,
featplot_nfeature = featplot_nfeature,
vlnplot_nfeature = vlnplot_nfeature,
featplot_ncount = featplot_ncount,
vlnplot_ncount = vlnplot_ncount))
}
clust.plots <- PlotClusters(obj.opossum)
Idents(obj.opossum) <- "SCT_snn_res.1"
clust.plots <- PlotClusters(obj.opossum)
save.plots <- list("dimplot_cluster" = "S1E_All-Cluster-DimPlot",
"dimplot_sample" = "S1F_All-Sample-DimPlot",
"barplot_sample" = "S1G_All-Sample-BarPlot",
"barplot_doublet" = "S1H_All-Doublet-BarPlot")
for (sp in names(save.plots)) {
SavePNGandSVG(clust.plots[[sp]], dir.list$figS1$plots, save.plots[[sp]])
}
clust.plots <- PlotClusters(obj.opossum)
gc()
duplicated(c(1, 1, 2, 3))
devtools
devtools::load_all()
devtools::load_all()
setwd("E:/Ryan/GitHub/comparatome")
devtools::load_all()
devtools::load_all()
library(Seurat)
library(SeuratDisk)
library(reticulate)
library(scrubletR)
library(ggplot2)
library(dplyr)
library(data.table)
library(tidyverse)
library(comparatome)
library(here)
source(here("config.R"))
# Define path to 10x output data and orthology table for gene mapping
data_path <- paste0(dir.list$central, "samples/")
sample_IDs <- c('OpossumV1-3A', 'OpossumV1-3B', 'OpossumV1-4A', 'OpossumV1-4B')
mapping_path <- paste0(dir.list$central, "Opossum_Mouse_GeneMapping_EnsemblBioMart.txt")
# Preprocess (incl. cell/gene filtering)
data <- PreprocessData(data_path, sample_IDs, "Opossum_V1", mapping_path)
# Grab the Seurat object for direct analysis
obj.opossum <- data$obj
obj.opossum$species <- "Opossum"
length(1)
length(c(1))
for (i in 1) {
print(i)
}
devtools::load_all()
# Plot nFeature and nCount
PlotQC(data)
# Initial clustering
obj.opossum <- ClusterWithSCT(obj.opossum, 1)
clust.plots <- PlotClusters(obj.opossum)
save.plots <- list("dimplot_cluster" = "S1E_All-Cluster-DimPlot",
"dimplot_sample" = "S1F_All-Sample-DimPlot",
"barplot_sample" = "S1G_All-Sample-BarPlot",
"barplot_doublet" = "S1H_All-Doublet-BarPlot")
for (sp in names(save.plots)) {
SavePNGandSVG(clust.plots[[sp]], dir.list$figS1$plots, save.plots[[sp]])
}
canon.markers <- list(
class = c("Snap25", "Sv2b", "Gad1", "Gad2"),
L23 = c("Cux2", "Ccbe1", "Mdga1", "Stard8"),
L4 = c("Whrn", "Rorb"),
L5IT = c("Bcl11b"),
L5NP = c("Nxph1", "Tshz2", "Trhr", "Slc17a8"),
L5PT = c("Bcl6", "Erg", "Reln"),
L6CT = c("Foxp2", "Syt6"),
L6IT = c("Zfp804b", "Cdh9"),
L6b = c("Ctgf", "Inpp4b", "Svil"),
Pvalb = c("Pvalb", "Myo5b"),
Sst = c("Sst", "Chodl"),
Vip = c("Vip"),
Lamp5 = c("Lamp5", "Sv2c"),
Other = c("Frem1", "Stac", "Sncg", "Meis2"),
Astro = c("Aldh1l1", "Grin2c", "Phkg1"),
Endo = c("Pecam1", "Mecom", "Flt1"),
Micro = c("Cx3cr1", "Arhgap45", "Inpp5d"),
OD = c("Enpp6", "Mog", "St18"),
OPC = c("Pdgfra", "Cacng4"),
VLMC = c("Slc6a13", "Slc47a1", "Bnc2")
)
# look for canonical markers
DefaultAssay(obj.opossum) <- "RNA"
# PlotFeatures(obj.opossum, canon.markers)
DotPlot(obj.opossum, features = canon.markers, cols = c("lightgrey", "red"), scale = FALSE) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.25)) +
theme(panel.background = element_rect(fill = "white", color = NA), plot.background = element_rect(fill = "white", color = NA)) + NoLegend()
rownames(obj.opossum)
gc()
library(Seurat)
library(SeuratDisk)
library(reticulate)
library(scrubletR)
library(ggplot2)
library(dplyr)
library(data.table)
library(tidyverse)
library(comparatome)
library(here)
source(here("config.R"))
# Define path to 10x output data and orthology table for gene mapping
data_path <- paste0(dir.list$central, "samples/")
sample_IDs <- c('OpossumV1-3A', 'OpossumV1-3B', 'OpossumV1-4A', 'OpossumV1-4B')
mapping_path <- paste0(dir.list$central, "Opossum_Mouse_GeneMapping_EnsemblBioMart.txt")
# Preprocess (incl. cell/gene filtering)
data <- PreprocessData(data_path, sample_IDs, "Opossum_V1", mapping_path)
devtools::load_all()
gc()
library(Seurat)
library(SeuratDisk)
library(reticulate)
library(scrubletR)
library(ggplot2)
library(dplyr)
library(data.table)
library(tidyverse)
library(comparatome)
library(here)
source(here("config.R"))
# Define path to 10x output data and orthology table for gene mapping
data_path <- paste0(dir.list$central, "samples/")
sample_IDs <- c('OpossumV1-3A', 'OpossumV1-3B', 'OpossumV1-4A', 'OpossumV1-4B')
mapping_path <- paste0(dir.list$central, "Opossum_Mouse_GeneMapping_EnsemblBioMart.txt")
# Preprocess (incl. cell/gene filtering)
data <- PreprocessData(data_path, sample_IDs, "Opossum_V1", mapping_path)
# Grab the Seurat object for direct analysis
obj.opossum <- data$obj
obj.opossum$species <- "Opossum"
rownames(obj.opossum)
# Read the orthology table
genes.mapping <- read.csv(mapping_path)
# Remove paralogs (keeping the first)
para.idx <- genes.mapping[, 1] %in% unique(genes.mapping[duplicated(genes.mapping[, 1]), 1])
genes.mapping <- genes.mapping[!para.idx,]
# Store columns of interest separately
genes.mapping.self <- as.list(genes.mapping[, 1])
ids.mapping.self <- as.list(genes.mapping[, 2])
genes.mapping.other <- as.list(genes.mapping[, 3])
genes.self <- rownames(obj.opossum)
# Loop over genes (from 'other', which is mapped to) that have orthologs (i.e., exist in table)
for (gene in genes.mapping.other) {
# Find all entries that match current gene
idx.other <- which(genes.mapping.other %in% gene)
# Proceed only if there is a 1:1 mapping between 'other' gene and 'self' gene
if (length(idx.other) == 1) {
gene.self <- genes.mapping.self[idx.other]
id.self <- ids.mapping.self[idx.other]
# If gene is not named in 'self' (e.g., novel gene only known by ID) or use_IDs is T, map based on ID
if ((gene.self == "") | (use_ids == TRUE)) {
idx.self <- which(genes.self %in% id.self)
genes.self[idx.self] <- gene
# Otherwise, use gene name if it exists
} else if (gene.self != "") {
idx.self <- which(genes.self %in% gene.self)
genes.self[idx.self] <- gene
}
}
}
use_ids = TRUE
# Read the orthology table
genes.mapping <- read.csv(mapping_path)
# Remove paralogs (keeping the first)
para.idx <- genes.mapping[, 1] %in% unique(genes.mapping[duplicated(genes.mapping[, 1]), 1])
genes.mapping <- genes.mapping[!para.idx,]
# Store columns of interest separately
genes.mapping.self <- as.list(genes.mapping[, 1])
ids.mapping.self <- as.list(genes.mapping[, 2])
genes.mapping.other <- as.list(genes.mapping[, 3])
genes.self <- rownames(obj.opossum)
# Loop over genes (from 'other', which is mapped to) that have orthologs (i.e., exist in table)
for (gene in genes.mapping.other) {
# Find all entries that match current gene
idx.other <- which(genes.mapping.other %in% gene)
# Proceed only if there is a 1:1 mapping between 'other' gene and 'self' gene
if (length(idx.other) == 1) {
gene.self <- genes.mapping.self[idx.other]
id.self <- ids.mapping.self[idx.other]
# If gene is not named in 'self' (e.g., novel gene only known by ID) or use_IDs is T, map based on ID
if ((gene.self == "") | (use_ids == TRUE)) {
idx.self <- which(genes.self %in% id.self)
genes.self[idx.self] <- gene
# Otherwise, use gene name if it exists
} else if (gene.self != "") {
idx.self <- which(genes.self %in% gene.self)
genes.self[idx.self] <- gene
}
}
}
gene.self
gene.self[[1]]
idx.other
gene
(length(idx.other) == 1)
gene.self
((gene.self == "") | (use_ids == TRUE))
idx.self <- which(genes.self %in% id.self)
idx.self
genes.self
devtools::load_all()
gc()
library(Seurat)
library(SeuratDisk)
library(reticulate)
library(scrubletR)
library(ggplot2)
library(dplyr)
library(data.table)
library(tidyverse)
library(comparatome)
library(here)
source(here("config.R"))
# Define path to 10x output data and orthology table for gene mapping
data_path <- paste0(dir.list$central, "samples/")
sample_IDs <- c('OpossumV1-3A', 'OpossumV1-3B', 'OpossumV1-4A', 'OpossumV1-4B')
mapping_path <- paste0(dir.list$central, "Opossum_Mouse_GeneMapping_EnsemblBioMart.txt")
# Preprocess (incl. cell/gene filtering)
data <- PreprocessData(data_path, sample_IDs, "Opossum_V1", mapping_path)
# Grab the Seurat object for direct analysis
obj.opossum <- data$obj
obj.opossum$species <- "Opossum"
rownames(obj.opossum)
# Plot nFeature and nCount
PlotQC(data)
# Initial clustering
obj.opossum <- ClusterWithSCT(obj.opossum, 1)
clust.plots <- PlotClusters(obj.opossum)
save.plots <- list("dimplot_cluster" = "S1E_All-Cluster-DimPlot",
"dimplot_sample" = "S1F_All-Sample-DimPlot",
"barplot_sample" = "S1G_All-Sample-BarPlot",
"barplot_doublet" = "S1H_All-Doublet-BarPlot")
for (sp in names(save.plots)) {
SavePNGandSVG(clust.plots[[sp]], dir.list$figS1$plots, save.plots[[sp]])
}
canon.markers <- list(
class = c("Snap25", "Sv2b", "Gad1", "Gad2"),
L23 = c("Cux2", "Ccbe1", "Mdga1", "Stard8"),
L4 = c("Whrn", "Rorb"),
L5IT = c("Bcl11b"),
L5NP = c("Nxph1", "Tshz2", "Trhr", "Slc17a8"),
L5PT = c("Bcl6", "Erg", "Reln"),
L6CT = c("Foxp2", "Syt6"),
L6IT = c("Zfp804b", "Cdh9"),
L6b = c("Ctgf", "Inpp4b", "Svil"),
Pvalb = c("Pvalb", "Myo5b"),
Sst = c("Sst", "Chodl"),
Vip = c("Vip"),
Lamp5 = c("Lamp5", "Sv2c"),
Other = c("Frem1", "Stac", "Sncg", "Meis2"),
Astro = c("Aldh1l1", "Grin2c", "Phkg1"),
Endo = c("Pecam1", "Mecom", "Flt1"),
Micro = c("Cx3cr1", "Arhgap45", "Inpp5d"),
OD = c("Enpp6", "Mog", "St18"),
OPC = c("Pdgfra", "Cacng4"),
VLMC = c("Slc6a13", "Slc47a1", "Bnc2")
)
# look for canonical markers
DefaultAssay(obj.opossum) <- "RNA"
# PlotFeatures(obj.opossum, canon.markers)
DotPlot(obj.opossum, features = canon.markers, cols = c("lightgrey", "red"), scale = FALSE) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.25)) +
theme(panel.background = element_rect(fill = "white", color = NA), plot.background = element_rect(fill = "white", color = NA)) + NoLegend()
# look for canonical markers
DefaultAssay(obj.opossum) <- "RNA"
# PlotFeatures(obj.opossum, canon.markers)
p <- DotPlot(obj.opossum, features = c("Snap25", "Sv2b", "Gad1", "Gad2"),
cols = c("lightgrey", "red"), scale = FALSE) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.25)) +
theme(panel.background = element_rect(fill = "white", color = NA),
plot.background = element_rect(fill = "white", color = NA)) +
NoLegend()
print(p)
SavePNGandSVG(p, dir.list$figS1$plots, "S1I_All-Class-DotPlot")
cells.glutamatergic <- WhichCells(obj.opossum, ident = c(1, 4, 5, 8, 9, 10, 11, 13, 14, 15, 17, 20, 24))
obj.opossum$class <- ifelse(colnames(obj.opossum) %in% cells.glutamatergic, "glutamatergic", "ambiguous")
cells.gabaergic <- WhichCells(obj.opossum, ident = c(6, 16, 18, 21, 22, 23, 25))
obj.opossum$class[cells.gabaergic] <- "gabaergic"
cells.nonneuronal <- WhichCells(obj.opossum, ident = c(2, 3, 7, 12, 19, 26, 27))
obj.opossum$class[cells.nonneuronal] <- "nonneuronal"
p <- DimPlot(obj.opossum, reduction = "umap", group.by = "class", label = FALSE, raster = FALSE, shuffle = TRUE) + xlim(-18, 18) + ylim(-18, 18) + coord_equal()
print(p)
SavePNGandSVG(p, dir.list$figS1$plots, "S1J_All-Class-DimPlot")
obj.opossum$all_SCT_snn_res.1 <- obj.opossum$SCT_snn_res.1 # Save the original clustering result for future reference
Idents(obj.opossum) <- "class"
obj.opossum.glutamatergic <- subset(obj.opossum, idents = "glutamatergic")
saveRDS(obj.opossum.glutamatergic, paste0(dir.list$central, "opossum_v1_glutamatergic.rds"))
obj.opossum.gabaergic <- subset(obj.opossum, idents = "gabaergic")
saveRDS(obj.opossum.gabaergic, paste0(dir.list$central, "opossum_v1_gabaergic.rds"))
obj.opossum.nonneuronal <- subset(obj.opossum, idents = "nonneuronal")
saveRDS(obj.opossum.nonneuronal, paste0(dir.list$central, "opossum_v1_nonneuronal.rds"))
gc()
gc()
